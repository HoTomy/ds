{
  "version": 3,
  "sources": ["../../routes/dogs.ts"],
  "sourcesContent": ["import Router, {RouterContext} from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport * as model from '../models/dogs';\nimport { basicAuth } from \"../controllers/auth\";\n\n\nconst router = new Router({prefix: '/api/v1/dogs'});\n\n\n// New getAll\nconst getAll = async (ctx: RouterContext, next: any)=> {\n let dogs = await model.getAll();\n if (dogs.length) {\n ctx.body = dogs;\n } else {\n ctx.body = {}\n }\n await next();\n}\n\nconst getById = async (ctx: RouterContext, next: any) => {\n  let id = ctx.params.id;\n  let dog = await model.getById(id);\n  if (dog.length) {\n    ctx.body = dog[0];\n  } else {\n    ctx.status = 404;\n  }\n  await next();\n}\n\nconst createDogs = async (ctx: RouterContext, next: any) => {\n  const body = ctx.request.body;\n  let result = await model.add(body);\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = {err: \"insert data failed\"};\n  }\n  await next();\n}\n\nconst updateDogs = async (ctx: RouterContext, next: any) => {\n    let id = ctx.params.id;\n    let context: any = ctx.request.body;\n    let update_dogs = await model.updateById(context,id);\n    let dog = await model.getById(id);\n    ctx.body = dog;\n    ctx.status = 200;  \n    if (dog.length){\n        ctx.body = dog;\n    } else {\n        ctx.body = {}\n    }\n    await next();\n}\n\nconst deleteDogs = async (ctx: RouterContext, next: any) => {\n    let id = ctx.params.id;\n    await model.deleteById(id);\n    let dog = await model.getById(id);\n    ctx.body = dog;\n    ctx.status = 200;  \n    if (dog.length){\n    } else {\n        ctx.body = `id:${id} deleted success`\n    }\n    await next();\n}\n\nrouter.get('/', getAll);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.post('/',basicAuth, bodyParser(), createDogs);\nrouter.put('/:id([0-9]{1,})',basicAuth,bodyParser(),updateDogs);\nrouter.del('/:id([0-9]{1,})',basicAuth, deleteDogs);\n\n// Finally, define the exported object when import from other scripts.\nexport { router };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAoC;AACpC,4BAAuB;AACvB,YAAuB;AACvB,kBAA0B;AAG1B,MAAM,SAAS,IAAI,kBAAAA,QAAO,EAAC,QAAQ,eAAc,CAAC;AAIlD,MAAM,SAAS,OAAO,KAAoB,SAAa;AACtD,MAAI,OAAO,MAAM,MAAM,OAAO;AAC9B,MAAI,KAAK,QAAQ;AACjB,QAAI,OAAO;AAAA,EACX,OAAO;AACP,QAAI,OAAO,CAAC;AAAA,EACZ;AACA,QAAM,KAAK;AACZ;AAEA,MAAM,UAAU,OAAO,KAAoB,SAAc;AACvD,MAAI,KAAK,IAAI,OAAO;AACpB,MAAI,MAAM,MAAM,MAAM,QAAQ,EAAE;AAChC,MAAI,IAAI,QAAQ;AACd,QAAI,OAAO,IAAI;AAAA,EACjB,OAAO;AACL,QAAI,SAAS;AAAA,EACf;AACA,QAAM,KAAK;AACb;AAEA,MAAM,aAAa,OAAO,KAAoB,SAAc;AAC1D,QAAM,OAAO,IAAI,QAAQ;AACzB,MAAI,SAAS,MAAM,MAAM,IAAI,IAAI;AACjC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAC,KAAK,qBAAoB;AAAA,EACvC;AACA,QAAM,KAAK;AACb;AAEA,MAAM,aAAa,OAAO,KAAoB,SAAc;AACxD,MAAI,KAAK,IAAI,OAAO;AACpB,MAAI,UAAe,IAAI,QAAQ;AAC/B,MAAI,cAAc,MAAM,MAAM,WAAW,SAAQ,EAAE;AACnD,MAAI,MAAM,MAAM,MAAM,QAAQ,EAAE;AAChC,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,IAAI,QAAO;AACX,QAAI,OAAO;AAAA,EACf,OAAO;AACH,QAAI,OAAO,CAAC;AAAA,EAChB;AACA,QAAM,KAAK;AACf;AAEA,MAAM,aAAa,OAAO,KAAoB,SAAc;AACxD,MAAI,KAAK,IAAI,OAAO;AACpB,QAAM,MAAM,WAAW,EAAE;AACzB,MAAI,MAAM,MAAM,MAAM,QAAQ,EAAE;AAChC,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,IAAI,QAAO;AAAA,EACf,OAAO;AACH,QAAI,OAAO,MAAM;AAAA,EACrB;AACA,QAAM,KAAK;AACf;AAEA,OAAO,IAAI,KAAK,MAAM;AACtB,OAAO,IAAI,mBAAmB,OAAO;AACrC,OAAO,KAAK,KAAI,2BAAW,sBAAAC,SAAW,GAAG,UAAU;AACnD,OAAO,IAAI,mBAAkB,2BAAU,sBAAAA,SAAW,GAAE,UAAU;AAC9D,OAAO,IAAI,mBAAkB,uBAAW,UAAU;",
  "names": ["Router", "bodyParser"]
}
